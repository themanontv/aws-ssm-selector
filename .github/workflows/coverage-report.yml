name: Coverage report

on:
    push:
        branches:
            - main
    pull_request:
        types: [opened, synchronize, reopened]

jobs:
    coverage:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: '3.11'

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install pytest pytest-cov xmltodict

            - name: Run tests with coverage and produce XML
              run: |
                  pytest --cov=src --cov-report=xml:coverage.xml --maxfail=1 -q

            - name: Convert coverage XML to HTML summary
              id: make_html
              run: |
                  python - <<PY
                      import xml.etree.ElementTree as ET
                      from pathlib import Path
                      xml_path = Path('coverage.xml')
                      out_path = Path('coverage-summary.html')

                      if not xml_path.exists():
                          print('Coverage XML not found')
                          raise SystemExit(1)

                      tree = ET.parse(xml_path)
                      root = tree.getroot()

                      # coverage XML root contains packages -> classes with line-rate attributes.
                      # We'll extract file-wise coverage if available, otherwise package summary.
                      rows = []
                      # Attempt to parse <packages><package><classes><class> entries
                      for pkg in root.findall('.//package'):
                          pkg_name = pkg.get('name', '')
                          for cls in pkg.findall('.//class'):
                              filename = cls.get('filename', '')
                              # line-rate is 0..1
                              line_rate = cls.get('line-rate')
                              try:
                                  pct = float(line_rate) * 100 if line_rate is not None else None
                              except:
                                  pct = None
                              rows.append((filename or pkg_name, pct))

                      # Fallback: look for top-level coverage line-rate attribute
                      if not rows:
                          line_rate = root.get('line-rate')
                          pct = float(line_rate) * 100 if line_rate is not None else None
                          rows.append(('total', pct))

                      # Build simple HTML table
                      html = []
                      html.append('<!doctype html><html><head><meta charset="utf-8"><title>Coverage summary</title>')
                      html.append('<style>table{border-collapse:collapse;width:100%}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background:#f2f2f2}</style>')
                      html.append('</head><body>')
                      html.append('<h2>Coverage summary</h2>')
                      html.append('<table>')
                      html.append('<tr><th>File / Package</th><th>Line coverage</th></tr>')
                      for name, pct in sorted(rows, key=lambda x: (x[1] is None, -(x[1] or 0))):
                          pct_text = f"{pct:.1f}%" if pct is not None else 'N/A'
                          color = 'green' if pct is not None and pct >= 80 else ('orange' if pct is not None and pct >= 50 else 'red')
                          html.append(f'<tr><td>{name}</td><td style="color:{color}">{pct_text}</td></tr>')
                      html.append('</table>')
                      html.append('</body></html>')

                      out_path.write_text('\\n'.join(html), encoding='utf-8')
                      print('Wrote', out_path)
                  PY

            - name: Upload coverage HTML artifact
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-summary
                  path: coverage-summary.html

            - name: Optionally post summary as PR comment
              if: github.event_name == 'pull_request' && env.POST_PR_COMMENT == 'true'
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  python - <<PY
                      import os, xml.etree.ElementTree as ET, requests
                      from pathlib import Path
                      token = os.environ['GITHUB_TOKEN']
                      repo = os.environ['GITHUB_REPOSITORY']
                      pr = os.environ['GITHUB_REF'].split('/')[-1]
                      xml_path = Path('coverage.xml')
                      if not xml_path.exists():
                          print('No coverage.xml')
                          raise SystemExit(0)
                      tree = ET.parse(xml_path)
                      root = tree.getroot()
                      rows = []
                      for pkg in root.findall('.//package'):
                          for cls in pkg.findall('.//class'):
                              filename = cls.get('filename', '')
                              line_rate = cls.get('line-rate')
                              pct = float(line_rate) * 100 if line_rate is not None else None
                              rows.append((filename, pct))
                      if not rows:
                          line_rate = root.get('line-rate')
                          pct = float(line_rate) * 100 if line_rate is not None else None
                          rows = [('total', pct)]
                      # Build markdown table (first 20 rows)
                      md = []
                      md.append('| File | Coverage |')
                      md.append('|:---|---:|')
                      for name, pct in sorted(rows, key=lambda x: (x[1] is None, -(x[1] or 0)))[:20]:
                          pct_text = f"{pct:.1f}%" if pct is not None else 'N/A'
                          md.append(f'| `{name}` | {pct_text} |')
                      body = "### Coverage summary\\n\\n" + "\\n".join(md)
                      # Post comment
                      url = f'https://api.github.com/repos/{repo}/issues/{pr}/comments'
                      headers = {'Authorization': f'token {token}', 'Accept': 'application/vnd.github.v3+json'}
                      resp = requests.post(url, json={'body': body}, headers=headers)
                      print('Posted comment, status', resp.status_code)
                  PY
